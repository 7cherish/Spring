개발할때 환경설정이 반이다.
스프링은 80%된다.
환경설정만 잘해두면 그다음 개발이 수월하다.
그만큼 복잡하다.

가이드를 넘버링하면서 할테니 부담스러워 하지 말라.
설정할 것이 많기 때문에 처음 스프링 교육할때 큰 흐름을 만들어 보는것을 우선으로 하겠다.

스프링은 메이븐프레임워크 기반으로 작동한다.
메이븐이란? 
자바용 프로젝트 관리도구이다.
pom.xml 파일이 핵심이다.

예를 들어 그동안 JDBC 연결해서 쓰고 싶으면 Oracle XE 버전에 맞는 드라이버 라이브러리 ojdbc6.jar 파일이 필요했다.
JSTL 쓰고 싶으면 그에 맞는 라이브러리 jar 파일이 필요했다.
프로젝트 할때 어떤 기능을 구현하려면 해당 라이브러리가 반드시 필요하다는 뜻이다.
X한테 의존해서 처리한다고 해서 디펜더시라고 부른다.

메이븐을 사용하면 그 관리를 메이븐이 알아서 해준다.
메이븐 프레임워크에서는 로컬리파지토리(내컴퓨터) 리모트리파지토리(외부. 깃허브 같은 것)
사용하고자하는 라이브러리 jar 파일을 메이븐의 pom.xml 안에 필요한 라이브러리 jar 어떤 버전이 필요하다고 적으면
메이븐이 알아서 외부 리파지토리(메이븐 리파지토리)에서 로컬에 있는 리파지토리에 다운받아준다. 

필요한 버전 정보 이름만 알면 된다.

내컴퓨터안에 로컬 리파지토리가 있다.
실제로 pom.xml 문서를 통해서 필요한 라이브러리 jar 파일의 버전 정보와 이름을 적으면
메이븐이 해당 jar 파일을 로컬 리파지토리로 다운로드 받아준다.

처음 프로젝트 구성할 때 반드시 인터넷 연결이 되어 있어야 한다.
그리고 프로젝트에서 로컬 리파지토리를 참조한다.

이클립스(STS)를 설치하면 메이븐을 내장하고 있어서 별도로 다운로드 받지 않아도 된다.
로컬 리파지토리는 기본적으로 사용자 컴퓨터의 .m2 폴더 안에 생긴다.

우린 설정을 바꿔서 하겠다.
dev안에 설치해야할 파일이나 외부에서 가져온 것들을 몰아 넣을 것이다.
로컬 리파지토리를 dev폴더 안으로 옮길 것이다.
dev 폴더 밑에 maven 폴더 생성
dev밑에 두고 이클립스와 같이 STS.exe만 쓰면 된다.
maven폴더는 설정 파일만 필요하다.

Workspaces/sts_workspace 생성하고 STS에서 이 경로를 workspace로 지정

Server Runtime Add 아파치 8.5 선택 browse(실제 설치한 위치)
실제 설치되어 있는 톰캣을 이클립스 내부에서 Runtime으로 참조한다.
Runtime Environment를 기반으로 이클립스가 내부적으로 지역서버를 여러 개 만들 수 있는 것이다.
실제 설치한 톰캣을 알아보는 Runtime Server 환경 만든다.

apche-maven-3.6.0-bin-zip에서 conf/settings.xml 파일 설정 
로컬 리파지토리 변경
<localRepository>C:\dev\maven\repository</localRepository>


Team/Ignored Resources Add Pattern
스프링 메이븐에서 BuildPath가 WEB-INF/classes가 아니라 target/classes로 바뀌었다.
그것들 무시하라고 설정해주는 것이다.

프로젝트 생성하기
	1. Spring Legacy Project
	2. Template 사용. 미리 구상해놓은 SpringMVCProject를 선택한다.
	3. ContextPath 설정을 따로 하지 않는다. 
	   3단계의 레벨로 패키지를 잡아주는데 com.kh.spring
	   여기서 3번째로 작성한게 (spring) ContextPath로 설정된다.
	   dev/maven/repository 확인해보면 파일들이 추가됐을 것이다.
	   maven이 필요한 파일들을 다운받아줬다.

navigatorView에서는 src와 target으로 나뉜다.
target 밑의 classes가 빌드되는 곳이다.
실제 소스는 src 밑의 main과 test 폴더로 나뉘는데
test폴더는 나중에 test tdd할때 사용하려고 미리 만들어둔 것이다.
이번에 우리는 test폴더는 안 쓸 것이다.

src/main 하위에 java, resources, webapp이 있다.
java는 우리가 알고 있는 자바파일이 만들어지는 곳이다.
resources도 우리가 알고 있던 것과 동일한 역할을 한다. 소스폴더이다.
webapp은 WebContent라고 생각하면 된다. 실제 WebServer에서 css파일이나 js파일 등을 가지러 갈때 루트 디렉토리이다.

src/resources 는 실제 컴파일 되는 폴더. target밑으로 들어간다.
webapp/resources 는 실제 웹페이지에서 쓸 자원들을 보관하는 곳이다.
WEB-INF 는 사용자가 url로 입력해서 들어가지 못하는 안전한 곳이다.
WEB-INF/views/ 에 jsp파일을 만들 것이다.


메이븐 리파지토리가 완벽하지는 않다. (pom.xml)
실질적으로 파일이 문제 있는 경우가 있기 때문이다.
그런 경우에는 WEB-INF 하위에 lib 폴더를 임의로 만들어서 문제가 있는 jar파일을 직접 넣어주면 된다.

JSTL관련 jar파일 4개 lib폴더에 넣어주기

WEB-INF/jspwork 폴더 생성
jspwork Alt + Enter(properties) 해서 절대 경로 복사해주고
서버 context.xml 에서 <Context workDir="jspwork폴더 절대경로"> 로 변경해준다.



