-------------------------------------------------------------------------------------------
스프링 FrameWork의 특징
-------------------------------------------------------------------------------------------
- IOC (Inversion Of Control) 제어의 역전
	개발자가 직접 구현했던 것들을 프레임워크로 가져갔다.
	그만큼 개발자가 할 일이 없다. 
	인수인계가 용이하다.

- DI (Dependency Injection) 의존주입
	멤버 컨트롤러를 하나 만들었는데 일련의 DB 기로에서의 업무로직을 처리하기 위해서 멤버 서비스라는 객체가 필요했다. 
	이제는 멤버서비스 = new 멤버서비스 이렇게 하지 않고, 
	
	멤버서비스를 필드로서 선언만 할 것이다. (싱글턴) 
	이걸 프레임워크쪽에서 자동으로 넣어준다. 
	이것을 DI라고 한다.
	
	스프링은 빈을 관리시, 기본적으로 싱글턴으로 처리한다.
	cf) 싱글턴 : 프로그램 구동 중 객체를 하나만 만들고 공유해서 쓰는 것. (경제적, 효율적)
	
	멤버컨트롤러는 멤버 서비스 없이는 아무 일도 못한다.
	멤버컨트롤러에서는 Service 객체가 반드시 필요하다.
	
	업무로직을 멤버서비스에 요청하지 못하기 때문에. 
	멤버서비스는 멤버컨트롤러에 대해 의존이다.
	
	그 의존을 주입해주는 것을 프레임워크쪽에서 한다.
	제어가 역전된거다.
	
	멤버서비스 멤버서비스타입의 m이란 변수에 new 멤버서비스해서 객체를 만들어 넣었는데 이제는 그럴 필요가 없다.

	IOC와 DI는 따라 다니는 개념이다. 
	같은 맥락에서 이해하면 좋다.
	
	------------------------------------------------------------------------
	의존성 주입이란 사용자가 직접 new 키워드를 사용하여 객체를 생성하지 않고, 
	외부( 컨테이너 )에서 생성된 객체를 주입 받는 방식을 말한다.
	
	스프링에서는 이와 같이 의존성 주입을 통해 객체 간의 의존성 문제를 해결하며, 
	객체의 생성과 소멸을 개발자가 관리하지 않고 스프링에서 관리하는데, 
	이러한 현상을 제어 역전 ( IoC, Inversion of Control )이라 한다.
	--------------------------------------------------------------------------



- AOP (Aspect Oriented Programming) 관점지향프로그래밍
	공통된 업무들을 별도로 빼서 처리하는 것이다. 
	서버쪽에 기록을 남기는 작업을 별도로 관리한다.
	
	* cf) KH정보교육원 PDF
		Spring AOP 란, 
		관점 지향 프로그래밍의 약자로 일반적으로 사용하는 클래스(Service, Dao 등) 에서 
		중복되는 공통 코드 부분(commit, rollback, log 처리)을 별도의 영역으로 분리해 내고, 
		코드가 실행 되기 전이나 이 후의 시점에 해당 코드를 붙여 넣음으로써 
		소스 코드의 중복을 줄이고, 필요할 때마다 가져다 쓸 수 있게 객체화하는 기술을 말한다.
	
	* cf) 생활코딩 설명
	    AOP
	    관점지향형 프로그램으로 사용자들이 트랜젝션 처리/로깅/예외 처리들의 로직을 공통으로 처리할 수 있는 기능을 지원함. 
	    해당 기능을 잘 사용하면 비지니스로직와 기타 공통모듈이 섞이는 것을 방지하여 비지니스 로직에 집중할 수 있도록 합니다.

* IOC, DI, AOP 는 필수로 알고 있어야 한다.

- POJO (Plain Old Java Object) 평범하고 늙은 자바 객체 <-> ejb 
	ejb는 예전 기업용 프레임워크이다. (현재에도 씀) 
	ejb에서는 객체들은 상속을 받고 구현을 하고... 기능이 많은 대신 객체 하나 쓰기를 까다롭다.
	
	POJO는 ejb와 달리 우리가 편하고 쉽게 알 수 있는 자바 객체이다.
	
	* cf) 생활코딩 설명
	    POJO (Plain Object Java  Object)
	    기본적으로 사용자가 만들어낸 객체를 의미함. 
	    스프링은 사용자가 만들 객체들에 대해서도 라이프사이클 관리를 위임해서 수행하며, 이들의 조합으로 어플리케이션을 만들 수 있음.
    
	
- PSA (Portable Service Abstraction) 추상화된 제어
	예를 들면 JDK에도 로깅을 지원하는 프레임워크가 있다. 
	당신이 뭘 사용하던지간에 log4j를 사용하든 다른 로깅프레임워크를 사용하든 
	이것을 상위레벨에서 제어할 수 있다는 것이다.
	
	ex) 로깅에 쓸 수 있는 프레임워크가 log4j, log4j2 등이 올 수 있는데,
		이 네 가지는 제공하는 기능과 사용법이 조금씩 다르다.
		매번 어플리케이션이 바뀔때마다 제어가 불편하니까
		상위 개념에서 컨트롤 할 수 있는게 PSA 이다.
		추상화된 개념에서 제어할 수 있는게 PSA
		slf4j는 그 개념으로 만들어진 것이다.
		slf4j를 제어한다고 해서 log4j 의 모든 것을 컨트롤 할 수 있는 건 아니다.
	
    * cf) 생활코딩 설명
	    PSA(Portable Service Abstraction)
	    스프링은 다른 여러 모듈을 사용함에 있어서 별도의 추상화 레이어를 제공합니다. 
	    예를 들어 JPA를 사용할 때에서 Spring JPA를 사용하여 추상화 하므로 
	    실제 구현에 있어서 Hibernate를 사용하든 EclipseLink를 사용하든 사용자는 이 모듈의 의존 없이 프로그램에 집중할 수 있습니다.

-------------------------------------------------------------------------------------------
pom.xml (프로젝트 하위)
-------------------------------------------------------------------------------------------
Maven Project는 pom.xml이 가장 핵심적인 파일이다. 모든 것이 시작된다.
모든 의존을 관리하기 때문에 중요하다.
수정돼서 저장될때마다 바로 Web에 접속에서 다운로드 받는다.

<!-- 
	우리가 만든 3레벨의 패키지가 나누어져 기록되어 있다.
	artifactId가 ContextPath로 사용되고 있다.
-->

<groupId>com.kh</groupId>
<artifactId>spring</artifactId>

<!-- properties : 버전정보를 태그명으로 저장해서 다른 소스에서 참조한다. -->
<properties>
	<java-version>1.8</java-version>
	<!-- 무턱대고 버전을 올리면 다른 의존이랑 깨지기 때문에 테스트를 마친 5.0.6 버전을 사용하겠다. -->
	<org.springframework-version>5.0.6.RELEASE</org.springframework-version>
	<org.aspectj-version>1.6.10</org.aspectj-version>
	<org.slf4j-version>1.6.6</org.slf4j-version>
</properties>



<dependencies>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${org.springframework-version}</version>
		<exclusions>
			<!-- Exclude Commons Logging in favor of SLF4j -->
			<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
			 </exclusion>
		</exclusions>
	</dependency>
</dependencies>

${org.springframework-version} : properties에 적어준 <org.springframework-version> 를 태그명으로 저장한 것.
dev/maven/repository 에 들어가보자
dependencies 태그 밑의 경로를 따라가보면 다운로드 받은 것이 들어있다.
org.springframework/spring-context/${org.springframework-version}


Ctrl + Shift + L 누르면 Quick Text Search 가 열린다.
workspace 전체를 대상으로 검색한다.
검색하고자 하는 키워드를 입력해서 필요한 것을 찾으면 된다.


ojdbc6는 중앙저장소(공식저장소)에 있는 것을 쓰지 못한다.
그래서 별도로 사설저장소를 등록해줘야한다.
<!-- #1.1 사설저장소 등록 -->
<repositories>
	<repository>
		<id>datanucleus-repo</id>
		<url>http://www.datanucleus.org/downloads/maven2/</url>
	</repository>
</repositories>

properties 태그가 끝나는 곳에 작성한다.
xml에 태그들이 위치하는 순서가 있기 때문에 잘 지켜줘야 한다.

사설저장소도 막히면 lib밑에 필요한 jar파일을 직접 넣어준다.

Maven 이 관리하는 공식 저장소
http://mvnrepository.com 

여기서 검색한 jar파일이 실제로 사용 가능한지(신뢰할 수 있는지) 어디서 확인 가능하냐면,
http://spring.io/projects/ 에서 확인 할 수 있다.
GA(General Availity) 붙어 있는 버전이 안정적이다.


-------------------------------------------------------------------------------------------
web.xml (WEB-INF 하위)
-------------------------------------------------------------------------------------------
<!-- 스프링은 우리가 만든 클래스들을 빈으로 만들어 프로그램을 관리한다. -->
<!-- 빈은 프레임워크에서 관리하는 자바객체이다. 만들어놓고 등록만해주면 알아서 해준다. -->
<!-- 빈을 만들어 관리하는 스코프가 2개 있다.
1. root-Context : 
				프로그램당 1개. 
				프로그램에서 전체적으로 쓸 수 있는 것을 루트로 만든다. 
				루트는 데이터베이스 관련 빈들을 root-Context에 만들고, 
				서블릿 안에서 해결해야 하는 것들은 servlet-context안에서 비교분석하겠다는 뜻이다.
				
				 
2. servlet-context : 프로그램당 여러 개 가능하다. -->

<!-- root-context 기능  >> servlet-context 기능 -->


DB관련된 것들은 root에 만들어서 관리할 것이다.
서블릿이 여러개가 된다고 해도 다 처리할 수 있도록. (#6 참고)

<!-- #6. application컨텍스트 관련 설정 -->
<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>
		/WEB-INF/spring/root-context.xml
		<!-- #7.1 Spring Security 설정파일 등록 -->
		/WEB-INF/spring/security-context.xml
	</param-value>
</context-param>

security-context.xml 파일은 new - Spring Bean Configuration File - security 만 체크해서 프로젝트 체크 후 생성한다.


-------------------------------------------------------------------------------------------
security-context.xml (WEB-INF/spring/ 하위)
-------------------------------------------------------------------------------------------
<!-- #7.2 패스워드 암호화 관련 빈등록 -->
	<bean id="bcryptPasswordEncoder"
		  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
빈만 등록해준다.
빈의 이름은 id속성값으로 등록할 수 있는데,
안 쓰게 되면 클래스 이름(BCryptPasswordEncoder)을 소문자로 한 이름이 부여된다.


bcrypt 는 해시함수에서 진화됐다고 생각하면 된다.
해시함수는 단방향이다. 
사용자가 실제 입력한 pw가 해시 펑션에 의해서 암호화된 비밀번호로 바뀌는데
반대로는 안 된다고 했었다.

해시함수의 목적은 검색속도를 빨리 하기 위해 만들어졌다. 인덱스화 하기 위해서.
자바 컬렉션 부분도 해시함수를 통해서 구현한 것이다.
HashSet, HashMap 등 Hash 들어간것은 내부적으로 해시 함수를 사용하고
그것을 참조해서 중복값을 찾아내게 만들어졌다.

검색속도가 빠른 것이 단점이자 장점이다.
해킹하기 좋다.
그래서 만든 것이
1. salt : 1234 + 임의의 값을 더해서 (salt) 해시함수를 돌린다.
2. key strectching : 1234 암호화된걸 또 암호화하는 것.

		  
-------------------------------------------------------------------------------------------
servlet-context.xml (WEB-INF/spring/appServlet 하위)
-------------------------------------------------------------------------------------------
<annotation-driven />
	mvc 관련한 어노테이션을 처리해준다.
	annotation-driven 요소는 Spring Web MVC를 하기 위해 설정해야 하는 값들을 자동으로 로딩해준다. 
	해당 설정 어노테이션은 @RequestMapping, @ModelAttribute, @SessionAttribute, @RequestParam 등이 있다.

<resources mapping="/resources/**" location="/resources/" />
	사용자 요청중에 wepapp(루트) 밑에 resources 밑에 뭐라고 요청하던지 resources 밑에 가서 요청을 처리한다. 
	<!-- 이미지, css등 자원 경로를 안내함. (매핑시켜줌) -->
	
	resources란?
	이미지, js 및 css 파일과 같은 정적 리소스를 캐시 헤더로 서비스하기 위한 핸들러 구성 
	웹 브라우저에서 효율적인 로딩을 위해 최적화. 리소스가 모든 경로에서 서비스되도록 허용 
	스프링의 리소스 취급을 통해 연결 가능.
	
	속성
	- mapping
	이 처리기의 리소스를 제공하는 데 사용할 현재 Servlet 컨텍스트 내의 URL 매핑 패턴, 
	예: "/resources/**"
	
	-location
	* 스프링 리소스 패턴으로 지정된 정적 컨텐츠를 처리할 리소스 위치. 
	* 각각 위치는 유효한 디렉토리를 가리켜야 한다. 
	* 여러 위치를 쉼표로 구분된 목록으로 지정할 수 있으며, 
	* 지정된 순서대로 지정된 리소스에 대해 위치를 점검하십시오. 
	
	* 예를 들어 "/, classpath:/META-INF/public-web-resources/"는 웹 앱에서 모두 리소스를 서비스할 수 있도록 한다. 
	* /META-INF/public-web-resources/ 디렉토리를 포함하는 classpath의 모든 JAR에서 
	* 웹 애플리케이션 루트의 리소스 우선 순위 URL 기반 리소스(예: 파일, HTTP URL 등)의 경우 
	* 속성이 URL과 연관된 문자 집합을 나타내는 특수 접두사를 지원하므로 
	* 여기에 추가된 것은 "[Charset=Windows-31J]http://example.org/path"과 같이 올바르게 인코딩될 수 있다.
	
<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<beans:property name="prefix" value="/WEB-INF/views/" />
	<beans:property name="suffix" value=".jsp" />
</beans:bean>
	* class는 클래스가 어디 위치해있는지만 알려준다. (매핑)
	* InternalResourceViewResolver : View단을 처리한다.
	
	* prefix문자열 + 컨트롤의 반환 문자열 + suffix문자열
	* 이 설정으로 인해 Controller에서 return 파일명만 해줘도 된다.
	
	
<context:component-scan base-package="com.kh.spring" />
	* 스프링컨테이너에 의해 서버 켜질 때 자동 bean 등록
	* base-package에 적힌 동일패키지나 하위패키지에서
	* @Component 어노테이션이 붙은 클래스를 자동으로 검색해서 bean으로 등록한다.
		- 하위 어노테이션 : @Controller, @Service, @Repository (Dao) 
	
	* 별도의 이름 지정이 없다면 빈의 이름은 소문자로 시작하는 클래스명이다.
	* 빈으로 등록되지 않은 클래스는 스프링컨테이너에 의해 사용불가.
	* Framework에서 중요하다.

-------------------------------------------------------------------------------------------
log4j.xml (src/main/resources 하위)
-------------------------------------------------------------------------------------------
  %c : 카테고리명(logger이름)을 표시 (full class명) 
  		카테고리명이 a.b.c일때, %c{2}는 b.c를 출력 
  
  %C : 클래스명을 표시함. 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력 
  
  %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
  		%d{HH:mm:ss, SSS} 
  		%d{yyyy MMM dd HH:mm:ss, SSS} 
  		%d{ABSOLUTE}
       %d{DATE} 
       %d{ISO8601} 
       
  %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다. 
  
  %l : 로깅이 발생한 caller의 위치정보. 
  		자바파일명:라인번호(링크제공) 
  
  %L : 라인 번호만 출력한다(링크없음) 
  
  %m : 로그로 전달된 메시지를 출력한다. 
  
  %M : 로그를 수행한 메소드명을 출력한다. 
  
  %n : 플랫폼 종속적인 개행문자가 출력.
       rn 또는 n 
       
  %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal) 
  
  %r : 로그 처리시간 (milliseconds) 
  
  %t : 로그이벤트가 발생된 쓰레드의 이름을 출력 
  
  %% : % 표시를 출력. escaping 
  
  %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds) 
  
  %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key}형태.
  
  Log4J를 사용하면 무슨 Sql문을 사용하는지 무슨 데이터가 parameter로 넘어오는지 DB를 갔다 왔을때 어떤 데이터를 불러오는지를 Consol창을 통해 한 번에 알 수 있다.


* Appender : 전달된 로그를 어디에 출력할 지 결정 (콘솔출력, 파일기록, DB저장)

* Logger / root : 출력할 메세지를 Appender 에 전달한다. 로그주체
	- name 속성 : 로그주체. 패키지작성
	- additivity 속성 : 로그가 상위로 전달할 지 여부. 기본값 true
	- appender-ref 자식태그 : ref 속성값으로 appender 태그 name 값을 지정한다.
	- level 자식태그 : 로그레벨을 설정한다.
					   설정된 값 이상의 우선순위 일 경우, 로깅출력
					   * trace < debug < info < warn < error < fatal
					   
					   fatal : 아주 심각한 에러
					   error : 요청처리중 에러가 발생한 경우
					   warn : 프로그램실행에는 당장 문제가 없지만, 문제소지 있음
					   info : 상태변경과 같은 정보성 메세지
					   debug : 개발모드
					   trace : 디버그레벨을 조금 더 세분화하여 관리하기 위한 레벨

* appender 태그
	- 1. appender => Logger 출력을 처리할 객체
		* org.apache.log4j.ConsoleAppender
		* org.apache.log4j.DailyRollingFileAppender

	- 2. param : Tagget => Appender 전달된 로그를 어디에 출력할 지 결정 (콘솔출력, 파일기록, DB저장)
	
	- 3. layout => Layout 로그를 어떤 형식으로 출력할지 결정한다.
	
* Layout의 종류
	- DateLayout
	- HTMLLayout
	- PatternLayout (디버깅에 적합)
	- SimpleLayout
	- XMLLayout 
	



-------------------------------------------------------------------------------------------
Oracle SQL Developer 설정
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------
--dev테이블생성
-------------------------------------------------------------------------
1. 관리자 system에서 사용자 spring생성
	create user spring identified by spring
	default tablespace users;
	
	grant connect, resource to spring;

2. 접속 생성
	접속 이름, 사용자 이름, 비밀번호 : spring 저장

3. spring.sql 작성
	--dev 테이블생성
	create table dev(
	    dev_no number primary key,
	    dev_name varchar2(50) not null,
	    dev_age number,
	    dev_email varchar2(100) not null,
	    dev_gender char(1) check(dev_gender in ('M', 'F')),
	    dev_lang varchar2(100) not null
	);

--시퀀스 생성
	create sequence seq_dev_no;
	
	
	
-------------------------------------------------------------------------
--회원테이블생성 (MEMBER)
-------------------------------------------------------------------------
CREATE TABLE MEMBER(
  MEMBERID VARCHAR2(15)
 ,PASSWORD VARCHAR2(300) NOT NULL
 ,MEMBERNAME  VARCHAR2(20) NOT NULL
 ,GENDER CHAR(1) NOT NULL
 ,AGE NUMBER
 ,EMAIL VARCHAR2(30)
 ,PHONE CHAR(11)  NOT NULL
 ,ADDRESS VARCHAR2(100)
 ,HOBBY VARCHAR2(50)
 ,ENROLLDATE DATE DEFAULT SYSDATE
 ,CONSTRAINT PK_MEMBERID PRIMARY KEY(MEMBERID)
 ,CONSTRAINT CK_MEMBER_GENDER CHECK(GENDER IN ('M','F'))
);

INSERT INTO SPRING.MEMBER VALUES ('abcde','1234','아무개','M',25,'abcde@naver.com','01012345678','서울시 강남구','운동,등산,독서',DEFAULT);
INSERT INTO SPRING.MEMBER VALUES ('qwerty','1234','김말년','F',30,'qwerty@naver.com','01098765432','서울시 관악구','운동,등산',DEFAULT);
INSERT INTO SPRING.MEMBER VALUES ('admin','1234','관리자','F',33,'admin@naver.com','01012345678','서울시 강남구','독서',DEFAULT);
COMMIT;
	
------------------------------------------------------------------
--MEMO테이블생성
------------------------------------------------------------------
CREATE TABLE MEMO(
    MEMONO NUMBER PRIMARY KEY,
    MEMO VARCHAR2(2000),
    PASSWORD VARCHAR2(4),
    MEMODATE DATE DEFAULT SYSDATE
);

CREATE SEQUENCE SEQ_MEMONO
START WITH 1
INCREMENT BY 1
NOMINVALUE
NOMAXVALUE
NOCYCLE
NOCACHE;

INSERT INTO MEMO VALUES(SEQ_MEMONO.NEXTVAL, '반갑습니다. AOP', 1234, DEFAULT);

SELECT * FROM MEMO;

-------------------------------------------------------------------------------------------
DemoController
-------------------------------------------------------------------------------------------
@Controller클래스 메소드가 가질 수 있는 파라미터
	- HttpServletRequest
	- HttpServletResponse
	- HttpSession
	
	- InputStream / Reader : 요청에 대한 입력
	- OutputStream / Writer : 응답에 대한 출력
	
	하위 어노테이션을 가진 매개변수를 사용할 수 있다.
	- @PathVariable
	- @RequestParam
	- @RequestHeader
	- @CookieValue
	- @RequestBody
	
	- Map, Model, ModelMap : 뷰에 전달할 모델 데이터를 가진 객체 (속성에 저장할 필요없이 이 객체에 넣으면 된다)
	- Command객체 - vo객체
	- Error, BindingResult : 유효성 검사 관련 객체
	- SessionStatus : 세션관리객체
	- java.util.Locale : 서버지역정보
	
	 * ModelAndView(2.0)
	 * 	- Model 과 View 단 정보를 한 번에 다룬다.
	 *	ModelAndView mav
	 *	String view = "common/msg";
	 	
	 *	mav.addObject("변수 이름", "뷰로 보낼 데이터 값");
		
	 *	mav.setViewName("뷰의 경로");
		
	 *	return mav; // ModelAndView 객체를 반환한다.
	  
	 * ModelMap(2.0) : 일반 클래스
	 * 	- Model 객체관리, View 단은 문자열로 리턴하는 형식이다.
	 
	 
	 * Model(2.5) : 인터페이스
	 * 	- Model 객체관리, View 단은 문자열로 리턴하는 형식이다.
	 *	Model model
	 *	model.addAttribute("변수이름", "변수에 넣을 데이터값");

컨트롤러의 메소드를 핸들러라고도한다. 요청을 핸들링 한다고 해서.


@Controller
public class DemoController {

	// DI (Dependency Injection. 의존주입)
	// 필드로 생성
	// 자동으로 스프링쪽에 주입해달라고 심는 코드.
	// @Autowired 가 붙게 되면 스프링 컨테이너는 자기 빈으로 등록된 객체 중에서 DemoService 타입으로 검색을 한다
	// 실제 구현 객체인 DemoServiceImpl 에 빈으로 만들어놓은 것을 demoService에 넣어준다.
	// 스프링은 빈을 관리시, 기본적으로 싱글턴으로 처리한다.
	// 싱클턴 : 프로그램 구동 중 객체를 하나만 만들고 공유해서 쓰는 것. (경제적, 효율적)
	@Autowired
	DemoService demoService;
	
	@RequestMapping("/demo/demo.do")
	public String demo() {
		System.out.println("demo메소드가 요청되었습니다.");
		
		// 리턴할 페이지를 적어준다.
		return "demo/demo"; // /WEB-INF/views/demo/demo.jsp
	}

	* DispatcherServlet 하나로 
	* .do로 끝나는 모든 요청을 받아서 처리하고 실제 요청은 메소드로 컨트롤러에 위임하게 된다.
	* 예를 들면 @ReqeustMapping 어노테이션을 사용해서 (사용자의 요청. url. 요청메소드(get|post)) 알맞게 해당메소드로 연결시켜줄 수 있다.
	
	* return은 리턴할 페이지를 적어준다.
	* 경로를 포함해서 적어줄 수 있다.
	* return "demo/demo"; // /WEB-INF/views/demo/demo.jsp 여기로 view단을 선정해서 간다.
	 



	
	 * @RequestParam(value="devName")에 전송된 값을 String devName에 담아라)
	 * RequestParam으로 지정한 것은 반드시 value가 있어야 한다.
	 * required 속성의 기본값은 true이다.
	 * false로 해야 value가 없어도 에러가 발생하지 않는다.
	 
	 * defaultValue : 값이 없다면 이것으로 대체
	 * Spring에서는 HttpServletRequest 대신 Model을 많이 사용한다.
	 * Model에 담아도 HttpServletRequest와 마찬가지로 EL로 접근할 수 있다.
	 
@RequestMapping("/demo/demo2.do")
public String demo2(Model model,
					@RequestParam(value="devName", required=false) String devName,
					@RequestParam(value="devAge", defaultValue="30") int devAge,
					@RequestParam(value="devEmail") String devEmail,
					@RequestParam(value="devGender") String devGender,
					@RequestParam(value="devLang") String[] devLang) {
	
	Dev dev = new Dev(0, devName, devAge, devEmail, devGender, devLang);
	
	model.addAttribute("dev", dev);
	
	System.out.println("demo2메소드가 요청되었습니다.");
	System.out.println("dev@demo2()@DemoController = " + dev);
	
	// 리턴할 페이지를 적어준다.
	return "demo/demoResult"; // /WEB-INF/views/demo/demoResult.jsp
	
}


	 * value와 method 둘 다 배열이다.
	 * method= RequestMethod.POST  POST만 받는다. URL로 접근하면 에러
	 
	 * Dev dev 커맨드 객체
	 * 커맨드 패턴(Command pattern)이란 
	 * 요청을 객체의 형태로 캡슐화하여 사용자가 보낸 요청을 나중에 이용할 수 있도록 
	 * 매서드 이름, 매개변수 등 요청에 필요한 정보를 저장 또는 로깅, 취소할 수 있게 하는 패턴이다.
	@RequestMapping(value= "/demo/insertDev.do", method= RequestMethod.POST)
	public String insertDev(Dev dev) {
		// 업무로직
		
		int result = demoService.insertDev(dev);
		
		System.out.println("insertDev메소드가 요청되었습니다.");
		System.out.println(result > 0? "등록성공":"등록실패");
		
		// 리다이렉트 하는 법 : redirect: 하고 다음 요청 주소를 적으면 된다. /는 인덱스
		return "redirect:/demo/demoList.do";
	}

@SessionAttributes(value= {"memberLoggedIn"})
// memberLoggedIn 이라는 이름으로 모델에 세션속성으로 담으라는 뜻.
// value={""} 문자열 배열로 여러 개가 올 수 있다.

@RequestMapping("/member/memberLogout.do")
public String logout(SessionStatus sessionStatus) {
	// 기존에서처럼 session.SetAttribute() 사용하면 session.invalidate()으로 무효화시키면 된다.
	// @SessionAttributes 사용하면 sessionStatus.setComplete()로 무효화한다.
	// 둘 중 하나만 사용한다.
	
	if(!sessionStatus.isComplete()) {
		sessionStatus.setComplete();
	}
	
	return "redirect:/";
}
-------------------------------------------------------------------------------------------
model.vo
-------------------------------------------------------------------------------------------
DB할때 char타입은 되도록 안 쓰는게 좋다.
나중에 형변환할때 다 스트링으로 들어가기 때문이다.


웹서버 프로그래밍 진행할 때 
1. DB 컬럼명 (mybatis에서 카멜케이싱 자동으로 바꿔주는 설정으로 대소문자 구분하지 않고 _ 써도 해결 가능하다.)
2. VO 필드명
3. form의 name값을 같게 한다.
	 
-------------------------------------------------------------------------------------------
bootstrap 부트스트랩
-------------------------------------------------------------------------------------------
- Modal
	* 팝업창이 생겼을때 주위 영역(원래 부모창)을 컨트롤 할 수 없는 상태.
	* 제어권이 팝업창에 대해 우선권이 주어지는 것을 Modal 이라고한다.
	
	* window.open 함수 통해서 팝업을 만들게 되면 팝업임에도 불구하고 부모창과 별개가 된다.
	* 이것을 non-Modal 이라고 한다.
	
	우리는 로그인 버튼이 모달을 부르는 버튼이다.
	버튼에 data-target 이라는 속성이 있다.
	모달 영역의 id값을 data-target 에 적어주면 된다. 
	단, #으로 시작해야 한다.
	
	div class   modal-content > modal-header > modal-body > modal-footer
	기본적으로 이렇게 제공한다.
	header 를 없애도 되고 사용자 마음대로 사용하면 된다.
	
	submit 버튼은 반드시 form 안에 있어야 한다.

	
	
- Bootstrap 폼태그 작성시 유의할 점
	* input[type=text, password, tel, number], select 는
	=> .form-control 클래스 값이 필요하다.

	* input[type=checkbox, radio] 는
	=> .form-check-input 클래스 값이 필요하다.
	
	* label
	=> .form-check-label

	* radio / checkbox 는 div.form-check.form-check-inline 으로 감싸야 한다.
	
	
	
	
	
-------------------------------------------------------------------------------------------
Interceptor
-------------------------------------------------------------------------------------------
인터셉터 ( Interceptor )
	Interceptor란 컨트롤러에 들어오는 요청 HttpRequest와 컨트롤러가 응답하는 HttpResponse를 가로채는 역할을 한다.
	인터셉터는 관리자만 접근할 수 있는 관리자 페이지에 접근하기 전에 관리자 인증을 하는 용도로 활용될 수 있다.

Interceptor를 구현하는 방법 
	1. HandlerInterceptor 인터페이스를 구현하는 방법
	2. HandlerInterceptorAdapter 클래스를 상속 받는 방법

	HandlerInterceptorAdapter 클래스를 상속 받으면, 
	postHandle() , afterCompletion() 메서드가 구현되어 있으므로 필요한 메서드만 오버라이딩 하면 된다.



1.  preHandle() 메서드는  컨트롤러가 호출되기 전에 실행된다.
	매개변수 obj는 Dispatcher의 HandlerMapping 이 찾아준 컨트롤러의 메서드를 참조할 수 있는 HandlerMethod 객체이다.

2.  postHandle() 메서드는 컨트롤러가 실행된 후에 호출된다.

3.  afterComplete() 은 뷰에서 최종 결과가 생성하는 일을 포함한 모든 일이 완료 되었을 때 실행된다.
	각 메서드의 반환값이 true이면 핸들러의 다음 체인이 실행되지만 false이면 중단하고 남은 인터셉터와  컨트롤러가 실행되지 않는다.
	
	
	

	
Filter와 Interceptor의 차이

1. 호출 시점
Filter는 DispatcherServlet이 실행되기 전, Interceptor는 DispatcherServlet이 실행된 후

2. 설정 위치
Filter는 web.xml , Interceptor는 spring-servlet.xml

3. 구현 방식
Filter는 web.xml에서 설정을 하면 구현이 가능하지만, Interceptor는 설정은 물론 메서드 구현이 필요하다.

